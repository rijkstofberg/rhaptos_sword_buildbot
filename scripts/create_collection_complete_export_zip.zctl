import sys
import transaction
import subprocess
import tempfile
import os
import shutil

from Products.CMFCore.utils import getToolByName
from Products.RhaptosSite.utils import kill_other_threads_and_exit

# make a fake REQUEST
from Testing.makerequest import makerequest
app=makerequest(app)
app.REQUEST.set('PARENTS',[app])

if len(sys.argv) < 2:
    print "The script requires one parameter for the request key."
    sys.exit(0xDEADBEEF)

key = sys.argv[1]

portal = app.objectValues(['Plone Site','CMF Site'])[0]
qtool = getToolByName(portal, "queue_tool")
ptool = getToolByName(portal,'rhaptos_print')

if len(sys.argv) == 3:
    host = sys.argv[2]
    if host.find('://') != -1:
        host = host[(host.find('://')+3):]
else:
    import socket
    host = socket.getfqdn()+':8080'

app.REQUEST.traverse('/VirtualHostBase/http/%s/%s/VirtualHostRoot/' % (host,portal.id))

dictRequest = qtool.getRequest(key)
# expecting something like: dictRequest = { "id":"col10208", "version":"1.5", "repository":"http://cnx.org/content"}
if dictRequest is not None:
    qtool.start(key)

    try:
        repository = dictRequest['repository']
        collectionId = dictRequest['id']
        collectionVersion = dictRequest['version']
        project_short_name = portal.Title()
        collection = portal.content.getRhaptosObject(collectionId, version=collectionVersion)
        source_create = collection.restrictedTraverse('source_create')
        source_create.repository = repository

        # create the collection XML
        collectionXml = source_create()
        if type(collectionXml) is unicode:
            collectionXml = collectionXml.encode('utf-8')

        # create the barebones complete zip
        if collectionXml is not None and len(collectionXml) > 0:
            bytesCompleteZip = collection.create_complete(collectionXml=collectionXml)
        else:
            print "Failed to create the collection complete zip"

        strCompleteZipFileName    = "%s_%s_complete.zip" % (collectionId,collectionVersion)
        strOfflineZipFileName     = "%s_%s_offline.zip"  % (collectionId,collectionVersion)
        strEpubFileName           = "%s_%s.epub"         % (collectionId,collectionVersion)
        strOfflineFileLocation    = "%s_%s_complete"         % (collectionId,collectionVersion)

        # add offline HTML and docbook files to the complete zip and
        # create the epub (zip) file
        if bytesCompleteZip is not None and len(bytesCompleteZip) > 0:
            tmpdir = tempfile.mkdtemp()
            print "creating temp directory: " + str(tmpdir)
            file = open("%s/%s" % (tmpdir,strCompleteZipFileName), 'w')
            file.write(bytesCompleteZip)
            file.close()
            print "writing zip to temp directory: " + strCompleteZipFileName
            epubdir = ptool.getEpubDir()

            # launching bash script to build the epub file plus the offline zip
            script_location = 'SCRIPTSDIR' in os.environ and os.environ['SCRIPTSDIR'] or '.'
            rc = subprocess.call(['%s/content2epub.bash' % script_location, project_short_name, collectionId, collectionVersion, tmpdir, strCompleteZipFileName, strOfflineZipFileName, strEpubFileName, epubdir])

        # store the collection export zip in the PrintTool
        if bytesCompleteZip is not None and len(bytesCompleteZip) > 0:
            ptool.setFile(collectionId, collectionVersion, 'complete.zip', bytesCompleteZip)

        # store the collection offline zip in the PrintTool
        strFileName = "%s/%s/%s" % (tmpdir, strOfflineFileLocation,strOfflineZipFileName)
        if os.path.isfile(strFileName):
            file = open(strFileName, 'r')
            bytesOfflineZip = file.read()
            file.close()
            if bytesOfflineZip is not None and len(bytesOfflineZip) > 0:
                ptool.setFile(collectionId, collectionVersion, 'offline.zip', bytesOfflineZip)
            else:
                print "file %s exists but is empty" % strFileName
        else:
            print "Can not find file %s" % strFileName

        # store the collection epub (zip) file inn the PrintTool
        strFileName = "%s/%s" % (tmpdir,strEpubFileName)
        if os.path.isfile(strFileName):
            file = open(strFileName, 'r')
            bytesEpub = file.read()
            file.close()
            if bytesEpub is not None and len(bytesEpub) > 0:
                ptool.setFile(collectionId, collectionVersion, 'epub', bytesEpub)
            else:
                print "file %s exists but is empty" % strFileName
        else:
            print "Can not find file %s" % strFileName

        if os.path.isdir(tmpdir):
            shutil.rmtree(tmpdir)

        transaction.commit()
    except Exception, e:
        print "failure:", e
        pass

    qtool.stop(key)
    print "Creation of a collection complete zip, epub and offline zip is now complete."

    kill_other_threads_and_exit()
else:
    print "Could not find the request from the input request key '%s'." % key
    sys.exit(0xDEADBEEF)
