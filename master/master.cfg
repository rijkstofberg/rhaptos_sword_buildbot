# -*- python -*-
# ex: set syntax=python:

# THIS CONFIG WILL NOT CREATE ITS OWN VIRTUALENV OR BUILDOUT FROM SCRATCH!

# This is a very basic buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.
# There is a README.txt file in the root of the checkout that you should
# study. It contains all the necessary steps in order to setup an environtment
# in which to run this buildbot.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("rhaptos-slave", "rh4pt0s")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = GitPoller(
#        'git://github.com/buildbot/pyflakes.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300)

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.svnpoller import SVNPoller

svn_source= SVNPoller(
        svnurl = 'https://software.cnx.rice.edu/svn/devsets/rhaptos-sword-service/rhaptos-buildout',
        project = 'Rhaptos SWORD Service',
        svnuser = 'rijkstofberg',
        svnpasswd = 'r1jk@rh4pt0s',
        pollinterval=300)

rhaptos_swordservice_plone_git_source = GitPoller(
        'git@github.com:rochecompaan/rhaptos.swordservice.plone.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

rhaptos_atompub_plone_git_source = GitPoller(
        'git@github.com:rochecompaan/rhaptos.atompub.plone.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

c['change_source'] = [svn_source,
                      rhaptos_swordservice_plone_git_source,
                      rhaptos_atompub_plone_git_source,
                     ]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            branch='master',
                            treeStableTimer=None,
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git, SVN
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.process.properties import WithProperties

factory = BuildFactory()
# check out the source
# we assume the system dependencies and libraries have been installed.
# at the time of writing (28 Aug 2011) this includes:
# open jre 6
# python 2.4 including development packages
# python virtualenv

#factory.addStep(SVN(mode='update',
#                    svnurl='https://software.cnx.rice.edu/svn/devsets/rhaptos-sword-service/rhaptos-buildout',
#                    ))
#
#factory.addStep(Git(mode='update',
#                    repourl='git@github.com:rochecompaan/rhaptos.swordservice.plone.git',
#                    branch='master',
#                    workdir='"%(workdir)s/rhaptos.swordservice.plone"',
#                    ))
#
#factory.addStep(Git(mode='update',
#                    repourl='git@github.com:rochecompaan/rhaptos.atompub.plone.git',
#                    branch='master',
#                    workdir='"%(workdir)s/rhaptos.atompub.plone"',
#                    ))



vcs_update_cmd =\
    "./bin/develop up -f".split()
factory.addStep(
    ShellCommand(command=vcs_update_cmd,
                 description="Starting VCS update",
                 descriptionDone="VCS updated.",
                )
    )

buildout_cmd =\
    "./bin/buildout -c devel_pgsql.cfg".split()
factory.addStep(
    ShellCommand(command=buildout_cmd,
                 description="Starting buildout",
                 descriptionDone="buildout done.",
                )
    )

test_cmd =\
    "./bin/instance test -s Products.RhaptosSword".split()
factory.addStep(
    ShellCommand(command=test_cmd,
                 description="Starting tests",
                 descriptionDone="testing done.",
                )
    )

# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["rhaptos-slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status.mail import MailNotifier

mn = MailNotifier(fromaddr="rijk.stofberg@gmail.com",
                  sendToInterestedUsers=False,
                  extraRecipients=["projects@upfrontsystems.co.za"],
                  useTls=True, relayhost="smtp.gmail.com", smtpPort=587,
                  smtpUser="rijk.stofberg@gmail.com", smtpPassword="r1jk@g00gl3")
c['status'].append(mn)

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Rhaptos SWORD Service"
c['titleURL'] = "http://www.cnx.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

